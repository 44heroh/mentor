package com.company.stepik_course_184350.section_7.section_2.step_11;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

public class Solution {

    /**
     * https://stepik.org/lesson/1136541/step/11?unit=1148177
     *
     * –ó–∞–¥–∞—á–∞ E. –°–∏–º–ø–∞—Ç–∏—á–Ω—ã–µ —É–∑–æ—Ä—ã
     *
     * –ö–æ–º–ø–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–Ω—è—Ç—å—Å—è –≤—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ–º –≤–æ –¥–≤–æ—Ä–∞—Ö —É —Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —É–∑–æ—Ä –∏–∑ —á–µ—Ä–Ω—ã—Ö –∏ –±–µ–ª—ã—Ö –ø–ª–∏—Ç–æ–∫, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä 1 √ó 1 –º–µ—Ç—Ä.
     * –ò–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ –¥–≤–æ—Ä—ã –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö –ª—é–¥–µ–∏ÃÜ –∏–º–µ—é—Ç –Ω–∞–∏–±–æ–ª–µ–µ –º–æ–¥–Ω—É—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Ñ–æ—Ä–º—É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ ùëÄ √ó ùëÅ –º–µ—Ç—Ä–æ–≤.
     * –û–¥–Ω–∞–∫–æ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ —ç—Ç–æ–∏ÃÜ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—è–≤–∏–ª–æ—Å—å —Ü–µ–ª—ã—Ö –¥–≤–µ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º—ã: –≤–æ –ø–µ—Ä–≤—ã—Ö, –∫–∞–∂–¥—ã–∏ÃÜ –Ω–æ–≤—ã–∏ÃÜ –∫–ª–∏–µ–Ω—Ç –æ—á–µ–≤–∏–¥–Ω–æ –∑–∞—Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã —É–∑–æ—Ä, –≤—ã–ª–æ–∂–µ–Ω–Ω—ã–∏ÃÜ —É –Ω–µ–≥–æ –≤–æ –¥–≤–æ—Ä–µ, –æ—Ç–ª–∏—á–∞–ª—Å—è –æ—Ç —É–∑–æ—Ä–æ–≤ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —ç—Ç–æ–∏ÃÜ —Ñ–∏—Ä–º—ã, –∞ –≤–æ –≤—Ç–æ—Ä—ã—Ö, —ç—Ç–æ—Ç —É–∑–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–º.
     * –ö–∞–∫ –ø–æ–∫–∞–∑–∞–ª–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, —É–∑–æ—Ä —è–≤–ª—è–µ—Ç—Å—è —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–º, –µ—Å–ª–∏ –≤ –Ω–µ–º –Ω–∏–≥–¥–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –∫–≤–∞–¥—Ä–∞—Ç–∞ 2 √ó 2 –º–µ—Ç—Ä–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã—Ç–æ–≥–æ –ø–ª–∏—Ç–∫–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.
     * –î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–Ω —Å–º–æ–∂–µ—Ç –æ–±—Å–ª—É–∂–∏—Ç—å, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–µ —É–∑–æ—Ä—ã –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è.
     * –ü–æ–º–æ–≥–∏—Ç–µ –µ–º—É!
     *
     * –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     * –í –ø–µ—Ä–≤–æ–∏ÃÜ —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –¥–≤–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º: ùëÄ –∏ ùëÅ.
     *
     * –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     * –í—ã–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã—Ö —É–∑–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–ª–æ–∂–∏—Ç—å –≤–æ –¥–≤–æ—Ä–µ.
     * –£–∑–æ—Ä—ã, –ø–æ–ª—É—á–∞—é—â–∏–µ—Å—è –¥—Ä—É–≥ –∏–∑ –¥—Ä—É–≥–∞ —Å–¥–≤–∏–≥–æ–º, –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∏–ª–∏ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ–º, —Å—á–∏—Ç–∞—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏.
     *
     * @param args
     */
    public static void main(String[] args) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int[] mn = getArrayIntFromString(reader.readLine(), null);
        Arrays.sort(mn);
        int M = mn[0], N = mn[1];

        System.out.println(solve(M, N));
    }

    private static int solve(int m, int n) {
        int[][] dp = new int[n][1 << m]; // 1 << m = (int) Math.pow(2, m)
        Arrays.fill(dp[0], 1);

        for (int i = 1; i < n; i++) {
            for (int p1 = 0; p1 < 1 << m; p1++) {
                for (int p2 = 0; p2 < 1 << m; p2++) {
                    if (match(p1, p2, m)) {
                        dp[i][p2] += dp[i - 1][p1];
                    }
                }
            }
        }

        int sum = Arrays.stream(dp[n - 1]).sum();

        return sum;
    }

    private static boolean match(int p1, int p2, int m) {
        // check 1111 rectangles
        int x1 = p1 & p2;
        int y1 = x1 << 1;
        // check 0000 rectangles
        p1 = 1 << m - p1;
        p2 = 1 << m - p2;
        int x2 = p1 & p2;
        int y2 = x2 << 1;

        return (x1 & y1) == 0 && (x2 & y2) == 0;
    }

    private static int[] getArrayIntFromString(String s, String regex) throws Exception {
        if (s == null || s.equals("") || s.length() == 0) {
            throw new Exception("s is null");
        }

        if (regex == null || regex.equals("") || regex.length() == 0) {
            regex = " ";
        }

        return Arrays.stream(s.split(regex)).mapToInt(Integer::parseInt).toArray();
    }
}
