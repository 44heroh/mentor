package com.company.stepik_course_184350.section_6.section_2.step_8;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

public class Solution {

    /**
     * –ó–∞–¥–∞—á–∞ D. –ö—Ä–∞—Å–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ
     *
     * –í –ø–∞—Ä–∫–µ –≥–æ—Ä–æ–¥–∞ –ü–∏—Ç—Å–±—É—Ä–≥–∞ –µ—Å—Ç—å —á—É–¥–µ—Å–Ω–∞—è –∞–ª–ª–µ—è, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ ùëÅ –ø–æ—Å–∞–∂–µ–Ω–Ω—ã—Ö –≤ –æ–¥–∏–Ω —Ä—è–¥ –¥–µ—Ä–µ–≤—å–µ–≤, –∫–∞–∂–¥–æ–µ –æ–¥–Ω–æ–≥–æ –∏–∑ ùêæ —Å–æ—Ä—Ç–æ–≤.
     * –í —Å–≤—è–∑–∏ —Å —Ç–µ–º, —á—Ç–æ –ü–∏—Ç—Å–±—É—Ä–≥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–∏ÃÜ —á–µ–º–ø–∏–æ–Ω–∞—Ç –ë–∞–∏ÃÜ—Ç–ª–∞–Ω–¥–∏–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, –±—ã–ª–æ —Ä–µ—à–µ–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –æ–≥—Ä–æ–º–Ω—É—é –∞—Ä–µ–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏ÃÜ.
     * –¢–∞–∫, —Å–æ–≥–ª–∞—Å–Ω–æ —ç—Ç–æ–º—É –ø–ª–∞–Ω—É –≤—Å—è –∞–ª–ª–µ—è –ø–æ–¥–ª–µ–∂–∞–ª–∞ –≤—ã—Ä—É–±–∫–µ.
     * –û–¥–Ω–∞–∫–æ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –∫—É—Å—Ç–æ–≤ –≤–æ—Å–ø—Ä–æ—Ç–∏–≤–∏–ª–æ—Å—å —ç—Ç–æ–º—É —Ä–µ—à–µ–Ω–∏—é, –∏ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –¥–µ—Ä–µ–≤—å–µ–≤ –≤ –ø–æ–∫–æ–µ.
     * –°–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É –ø–ª–∞–Ω—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—Å–µ –¥–µ—Ä–µ–≤—å—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—É–¥—É—Ç –≤—ã—Ä—É–±–ª–µ–Ω—ã, –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –æ–¥–∏–Ω –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–∏ÃÜ –æ—Ç—Ä–µ–∑–æ–∫, —è–≤–ª—è—é—â–∏–∏ÃÜ—Å—è –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–æ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ.
     * –ö–∞–∂–¥–æ–≥–æ –∏–∑ ùêæ –≤–∏–¥–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã –ø–æ –æ–¥–Ω–æ–º—É —ç–∫–∑–µ–º–ø–ª—è—Ä—É.
     * –ù–∞ –≤–∞—Å –≤–æ–∑–ª–æ–∂–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–∏ÃÜ—Ç–∏ –æ—Ç—Ä–µ–∑–æ–∫ –Ω–∞–∏–º–µ–Ω—å—à–µ–∏ÃÜ –¥–ª–∏–Ω—ã, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–∏ÃÜ —É–∫–∞–∑–∞–Ω–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º.
     *
     * –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     *
     * –í –ø–µ—Ä–≤–æ–∏ÃÜ —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–∏ÃÜ–ª–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥–≤–∞ —á–∏—Å–ª–∞ ùëÅ –∏ ùêæ.
     * –í–æ –≤—Ç–æ—Ä–æ–∏ÃÜ —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–∏ÃÜ–ª–∞ —Å–ª–µ–¥—É—é—Ç ùëÅ —á–∏—Å–µ–ª (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏), ùëñ -–æ–µ —á–∏—Å–ª–æ –≤—Ç–æ—Ä–æ–∏ÃÜ —Å—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞–µ—Ç —Ü–≤–µ—Ç ùëñ - –æ–≥–æ —Å–ª–µ–≤–∞ –¥–µ—Ä–µ–≤–∞ –≤ –∞–ª–ª–µ–µ.
     * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –¥–µ—Ä–µ–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
     *
     * –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     *
     * –í –≤—ã—Ö–æ–¥–Ω–æ–∏ÃÜ —Ñ–∞–∏ÃÜ–ª –≤—ã–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–µ–≤–æ–≥–æ –∏ –ø—Ä–∞–≤–æ–≥–æ –∫–æ–Ω—Ü–æ–≤ –æ—Ç—Ä–µ–∑–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–∏ÃÜ –¥–ª–∏–Ω—ã, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–µ–≥–æ —É—Å–ª–æ–≤–∏—é.
     * –ï—Å–ª–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –≤—ã–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–∏ÃÜ.
     *
     * Input 1:
     * 5 3
     * 1 2 1 3 2
     * Output 1:
     * 2 4
     *
     * Input 2:
     * 6 4
     * 2 4 2 3 3 1
     * Output 2:
     * 2 6
     * @param args
     */
    public static void main(String[] args) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int[] nk = getArrayIntFromString(reader.readLine(), null);
        int n = nk[0], k = nk[1];
        int[] trees = getArrayIntFromString(reader.readLine(), null);
        int[] ans = solve(trees, n, k);
        System.out.println(ans[0] + " " + ans[1]);
    }

    private static int[] solve(int[] trees, int n, int k) {
        int[] countColor = new int[k];
        int l = 0, r = 0, minDiff = Integer.MAX_VALUE;
        int found = 0, leftBorder = 0;

        while (r < n) {
            if (countColor[trees[r] - 1] == 0) {
                found++;
            }
            countColor[trees[r] - 1]++;

            while (found == k) {
                int diff = r - l;
                if (diff < minDiff) {
                    minDiff = diff;
                    leftBorder = l;
                }
                countColor[trees[l] - 1]--;

                if (countColor[trees[l] - 1] == 0) {
                    found--;
                }
                l++;
            }

            r++;
        }

        return new int[]{leftBorder + 1, leftBorder + minDiff + 1};
    }

    private static int[] getArrayIntFromString(String s, String regex) throws Exception {
        if (s == null || s.equals("") || s.length() == 0) {
            throw new Exception("s is null");
        }

        if (regex == null || regex.equals("") || regex.length() == 0) {
            regex = " ";
        }

        return Arrays.stream(s.split(regex)).mapToInt(Integer::parseInt).toArray();
    }
}
